{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","paciente","sexo","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","f","target","name","value","className","onSubmit","e","preventDefault","trim","console","log","id","shortid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","align","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c6503df3.chunk.js","sourcesContent":["//import fragment for have the posibility of use more the one component in the return\r\nimport React, { Fragment, useState } from \"react\";\r\nimport shortid from 'shortid';\r\nconst Formulario = ({crearCita}) => {\r\n  //create the state citas\r\n  const [cita, actualizarCita] = useState({\r\n    paciente: '',\r\n    sexo: '',\r\n    fecha: '',\r\n    hora: '',\r\n    sintomas: ''\r\n  });\r\n  //create the state to evaluate the error\r\n  const [error, actualizarError] = useState(false);\r\n  //function execute when the user write in the form\r\n  const actualizarState = f => {\r\n    actualizarCita({\r\n        ...cita,             \r\n                [f.target.name]:f.target.value\r\n    })\r\n  }\r\n  //get the values to make the validation\r\n  const { paciente, sexo, fecha, hora, sintomas } = cita;\r\n  //this is the function when the user press the button \"agregar cita\"\r\n  const submitCita = (e) => {\r\n    //for make possible rewrite the event is necessary cancel the default even using this sentence\r\n    e.preventDefault();\r\n    //validation is the first step\r\n    if (\r\n      paciente.trim() === '' ||\r\n      sexo.trim() === '' ||\r\n      fecha.trim() === '' ||\r\n      hora.trim() === '' ||\r\n      sintomas.trim() === ''\r\n    ) {\r\n        console.log(error);\r\n      actualizarError(true);\r\n      console.log(error);\r\n      console.log(cita);\r\n      //this function is to remake the validation and don't execute the next line\r\n      return;\r\n    }\r\n    actualizarError(false);\r\n    //asign ID\r\n    cita.id = shortid();\r\n    //create cita\r\n    crearCita(cita);\r\n    //finally restatr the form\r\n    actualizarCita({\r\n      paciente: '',\r\n      sexo: '',\r\n      fecha: '',\r\n      hora: '',\r\n      sintomas: '' \r\n    })\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear cita</h2>\r\n      \r\n      {\r\n      //make the validation if all the fields have the information \r\n      //error is the variable to evaluate if is false or true if is true put in the screen the text\r\n      error ? <p className=\"alerta-error\">Todos los campos deben ser llenados</p>:null}\r\n         \r\n        <form\r\n        //this event is to send the values, calling the function submitCita\r\n        onSubmit={submitCita}\r\n      >\r\n        <label>Nombre del paciente</label>\r\n        <input //For read the dates\r\n          type=\"text\"\r\n          name=\"paciente\"\r\n          //usign skeleton framework this\r\n          //property take all the space available\r\n          className=\"u-full-width\"\r\n          //write the default text\r\n          placeholder=\"Nombre paciente\"\r\n          onChange={actualizarState}\r\n          value={paciente}\r\n        />\r\n\r\n        <label>Sexo del paciente</label>\r\n\r\n        <input //For read the dates\r\n          type=\"text\"\r\n          name=\"sexo\"\r\n          //usign skeleton framework this\r\n          //property take all the space available\r\n          className=\"u-full-width\"\r\n          //write the default text\r\n          placeholder=\"Masculino o Femenino\"\r\n          onChange={actualizarState}\r\n          value={sexo}\r\n        />\r\n\r\n        <label>Fecha de la cita</label>\r\n        <input //For read the dates\r\n          type=\"date\"\r\n          name=\"fecha\"\r\n          //usign skeleton framework this\r\n          //property take all the space available\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={fecha}\r\n        />\r\n\r\n        <label>Hora de la cita</label>\r\n        <input //For read the dates\r\n          type=\"time\"\r\n          name=\"hora\"\r\n          //usign skeleton framework this\r\n          //property take all the space available for this row\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={hora}\r\n        />\r\n\r\n        <label>Sintomas</label>\r\n        <textarea\r\n          className=\"u-full-width\"\r\n          name=\"sintomas\"\r\n          onChange={actualizarState}\r\n          value={sintomas}\r\n        ></textarea>\r\n\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Agregar cita\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\nconst Cita = ({cita,eliminarCita}) => {\r\n    return (\r\n        <div className=\"cita\">\r\n            <p>Paciente:<span>{cita.paciente}</span></p>\r\n            <p>Sexo:<span>{cita.sexo}</span></p>\r\n            <p>Fecha:<span>{cita.fecha}</span></p>\r\n            <p>Hora:<span>{cita.hora}</span></p>\r\n            <p>Sintomas:<span>{cita.sintomas}</span></p>\r\n            <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={()=> eliminarCita(cita.id)}\r\n            >Eliminar</button>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Cita;","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\nfunction App() {\n  //Citas in local storage\n  //Get all the local storage converted in JSON because is a string and I need a array\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  //array the citas\n  //next in the useState put the result the get the storage\n  const [citas, guardarCitas] = useState(citasIniciales);\n  //use effect is to make tasks when the state change is a listener\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas,citasIniciales]);\n  //next the } put the variable to evalue in the change\n\n  //function to take the actuality citas and add the new cita\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n\n  //funtion to delete a cita accord with the id\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  };\n\n  //conditional mesagge to the title the second row\n  const titulo =\n    citas.length === 0 ? \"No hay citas pendientes\" : \"Administra tus citas\";\n  return (\n    <Fragment>\n      <h1 align=\"center\">Administrador pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}